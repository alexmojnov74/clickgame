{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Card/Card.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","Card","onClick","randomCards","updateScore","id","src","image","alt","App","state","cards","clickedCards","includes","alert","setState","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","randomize","this","map","cardRender","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b633ae4b.chunk.js","sourcesContent":["import React from 'react';\nimport './Jumbotron.css';\n\nconst Jumbotron = (props) => (\n  <div className=\"container\">\n<div className=\"jumbotron\">\n  <h1>The <br />Simpsons!</h1>\n  <h3>React Clicky Game</h3>\n  <h5>Score: {props.score} <span> High Score: {props.highScore} </span></h5>\n</div>\n</div>\n)\n\nexport default Jumbotron;\n","import React from 'react';\nimport './Card.css';\n\nconst onClick = (props) => {\n\tprops.randomCards();\n\tprops.updateScore(props.id);\n}\n\nconst Card = (props) => (\n    \n      <div className=\"box\">\n      <a onClick={() => onClick(props)}>\n        <img src={props.image} alt=\"\" className=\"img-thumbnail\"/>\n      </a>\n    </div>\n    \n)\n\nexport default Card","import React, { Component } from 'react';\nimport Jumbotron from './components/Jumbotron/Jumbotron.js';\nimport Card from './components/Card/Card.js';\nimport cards from './cards.json';\nimport './index.css';\n\n\nclass App extends Component {\n\n  state = {\n    cards: cards,\n    score: 0,\n    highScore: 0,\n    clickedCards: [],\n  }\n\n  //Function to update the score when a card is clicked  \n  updateScore = (id) => {\n\n    //If statement which determines what happens if they picked an image they already picked\n    if (this.state.clickedCards.includes(id)) {\n      alert('You picked that character already!');\n      this.setState({ score: 0, clickedCards: [] })\n    }\n\n    //Else statement that determines what happens if they picked an image they have not picked before\n    else {\n      this.setState({ clickedCards: [...this.state.clickedCards, id] })\n      this.setState({ score: this.state.score + 1 })\n      //Nested if statement that determines what happens if user gets a high score\n      if (this.state.score >= this.state.highScore) {\n        this.setState({ highScore: this.state.score + 1 })\n      }\n      //Nested if statement if user wins the game  \n      if (this.state.score === 11) {\n        this.setState({ score: 0, highScore: 12, clickedCards: [], cards: cards })\n        alert('You won!');\n      }\n    }\n  }\n\n  // Fisher-Yates Shuffle to randomize layout of cards\n  //https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  randomCards = (array) => {\n    let currentIndex = array.length;\n    while (0 !== currentIndex) {\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({ randomize: cards });\n  }\n\n  //Render the entire app\n  render() {\n    return (\n      <div>\n        <Jumbotron score={this.state.score} highScore={this.state.highScore} />\n        <div className=\"container container1\">\n          <div className=\"row\">\n          {this.state.cards.map(cardRender => (\n            <div className='col-md-3' id={cardRender.id}>\n              <Card\n                image={cardRender.image}\n                randomCards={() => { this.randomCards(this.state.cards) }}\n                updateScore={() => { this.updateScore(cardRender.id) }} />\n            </div>\n            \n          ))}\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}